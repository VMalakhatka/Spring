-- Database: postgres

CREATE TABLE passports
(
    serial  VARCHAR(100) NOT NULL CHECK (serial <> ''),
    number  INT          NOT NULL CHECK (number > 0),
    user_id BIGINT       NOT NULL,
    CONSTRAINT passport_pkey PRIMARY KEY (user_id),
    CONSTRAINT fk_passport_to_user FOREIGN KEY (user_id)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION

);

INSERT INTO users (first_name, last_name, birth_date, email)
values ('Joel', 'Edgerton', '1974-06-23', NULL);
INSERT INTO users (first_name, last_name, birth_date, email)
values ('Tom', 'Hardy', '1979-09-15', 'joelEd@gmail.com');
INSERT INTO users (first_name, last_name, birth_date, email)
values ('Nicholas', 'Nolte', '1941-02-08', NULL);


-- CREATE TABLE client_app_statistics(
--                                       id BIGINT NOT NULL,
--                                       client_app_name VARCHAR(100) NOT NULL CHECK (client_app_name <> ''),
--                                       client_app_count INT NOT NULL
-- );
--
-- INSERT INTO client_app_statistics (client_app_name, client_app_count) values ('Chrome browser', 10);
-- UPDATE client_app_statistics SET client_app_count = client_app_count + 1 WHERE client_app_name = 'Chrome browser';
-- 1 Создайте таблицу, хранящую документ, удостоверяющий личность (паспорт), для пользователей. Свяжите таблицу паспортов с таблицей пользователей. Не у всех пользователей в БД может быть указан паспорт, но каждому паспорту соответствует один пользователь. У паспорта должны быть поля id, буквенная или числовая серия и номер. Создайте паспорта для двух пользователей. Выполните запрос на получение информации о пользователях вместе с данными паспортов.
-- 2 Создайте таблицу для хранения адресов доставки товаров пользователя. Свяжите таблицу адресов с таблицей пользователей. У одного пользователя может быть несколько адресов для доставки, но каждый адрес принадлежит только одному пользователю. Выполните запрос на получение информации о пользователях вместе с адресами.
CREATE TABLE registrations
(
    registration_date   DATE,
    confirmation_method VARCHAR(50),
    user_id             BIGINT NOT NULL,
    CONSTRAINT registration_pkey PRIMARY KEY (user_id),
    CONSTRAINT fk_registrations_to_user FOREIGN KEY (user_id)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

INSERT INTO passports (user_id, serial, number)
values (1, 'AB', 2344324);
INSERT INTO passports (user_id, serial, number)
values (2, 'BC', 345435);
INSERT INTO passports (user_id, serial, number)
values (3, 'DE', 543543);

CREATE TABLE comments
(
    id      BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    content VARCHAR(100) NOT NULL CHECK (content <> ''),
    user_id BIGINT       NOT NULL,
    CONSTRAINT fk_comments_to_user FOREIGN KEY (user_id)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
INSERT INTO comments (content, user_id)values ('Comment1',2);
INSERT INTO comments (content, user_id)values ('Comment2',2);
INSERT INTO comments (content, user_id)values ('Comment3',2);
INSERT INTO comments (content, user_id)values ('Comment4',3);


INSERT INTO users (first_name, last_name, birth_date, email)
values ('Joel', 'Edgerton', '1974-06-23', NULL);